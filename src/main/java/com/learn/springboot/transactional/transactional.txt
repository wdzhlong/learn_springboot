什么是事物：事件是保证数据一致性与完整性

对于声明式事务，是使用@Transactional进行标注的。这个注解可以标注在类或者方法上，当它标注在类上时，代表这个类所以公共
（public）非静态的方法都将启动事物功能。在@Transactional中，还允许配置许多的属性，如事务的隔离级别和传播行为，异常类
型，从而确定方法发生什么异常下回滚事务或者发生什么异常下不回滚事务等。这些配置内容，是在spring ioc容器在加载时就会将
这些配置信息解析出来，然后把这些信息存到事务管理器(TransactionDefintion接口的实现类)里，并且记录哪些类或者方法需要启
动事务功能，采取什么策略去执行事务。

事务4大特性：
Atomic(原子性):事务中包含的操作被看作一个整体的单元，这个业务单元的操作要么全部成功，要么全部失败，不会出现部分失败、
部分成功的场景。
Consistency(一致性):事务在完成时，必须使所有的数据都保持一致的状态，在数据库中所有的修改都基于事务，保证了数据的完整性。
Isolation(隔离性):可能多个应用程序线程同时访问同一数据，这样数据库同样的数据就会在各个不同的事务中被访问，这样会产生丢失
更新。为了压制丢失更新的产生，数据库定义了隔离级别的概念，通过它的选择，可以在不同程度上压制丢失更新的产生。
Durability(持久性):事务结束后，所有的数据会固化到一个地方，如保存到磁盘当中，即使断电重启之后也可以提供给应用程序访问。

数据库隔离级别：
1.未提交读(read uncommitted):是最低的隔离级别，其含义是允许一个事务读取另外一个事务没有提交的数据。未提交读是一种危险
的隔离级别，所以一般在我们实际的开发中应用不广，但是它的优点在于并发能力高，适合那些对数据一致性没有要求而追求高并发的
场景，它的坏处是出现脏读。
脏读出现的场景：
时刻          事务1                事务2                        备注
TO                                                              商品库存初始化为2
T1            读取库存为2
T2            扣减库存                                          库存为1
T3                                 扣减库存                     库存为0，读取事务1未提交的库存数据
T4                                 提交事务                     库存为0
T5            回滚事务                                          库存为0，结果错误


